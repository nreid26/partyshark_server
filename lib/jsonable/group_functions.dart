part of jsonable;

/// Returns the result of JSON encoding the result of [toJsonGroupMap].
String toJsonGroupString(Iterable<Jsonable> set) => JSON.encode(toJsonGroupMap(set));

/// Returns the result of [fillFromJsonGroupMap] when called with the JSON
/// decoding of source.
Iterable<Jsonable> fillFromJsonGroupString(String source, Jsonable construct()) =>
  fillFromJsonGroupMap(JSON.decode(source), construct);


/// Returns a [Map] of the form:
///
///     {
///       "properties": [name_0, name_1, ...]
///       "values": [
///         [object_0.name_0, object_0.name_0, ...]
///         [...]
///       ]
///     }
///
/// where [object_0] is the first object in the provided iterable and [name_n]
/// is the [name] of an arbitrary, defined, [JsonProperty] owned by [object_0].
Map<String, dynamic> toJsonGroupMap(Iterable<Jsonable> set) {
  if (set == null || set.isEmpty) {
    return const {
      'properties': const [ ],
      'values': const [ ]
    };
  }

  Map<String, int> indecies = set.first.toJsonMap();
  List<String> propertyNames = indecies.keys.toList(growable: false);
  List<List> values = [ ];

  int i = 0;
  for(String s in propertyNames) { indecies[s] = i; }

  for(Jsonable object in set) {
    List valueList = new List(propertyNames.length);

    for(JsonProperty prop in object.properties) {
      if(indecies.containsKey(prop.name)) {
        valueList[indecies[prop.name]] = prop.encodableValue;
      }
    }

    values.add(valueList);
  }

  return {
    'properties': propertyNames,
    'values': values
  };
}

/// This function is the inverse of [toJsonGroupMap].
///
/// Returns an [Iterable] of objects generated by calling [construct] and then
/// calling [fillFromJsonMap] on the resulting [Jsonable] with values recovered
/// from [source] as the argument. [source] should have the same structure as
/// documented for [toJsonGroupMap].
Iterable<Jsonable> fillFromJsonGroupMap(Map<String, dynamic> source, Jsonable construct()) sync* {
  List<String> propertyNames = source['properties'];

  for(List valueList in source['values']) {
    yield construct()..fillFromJsonMap(new Map.fromIterables(propertyNames, valueList));
  }
}

